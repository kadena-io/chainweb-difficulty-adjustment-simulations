"""
Chainweb Graphs

Chainweb graphs are undirected and regular graphs that are choosen to have low
degree and low diameter. 

Each vertex of a Chainweb graph represents a chain and edges designate the
dependencies between blocks on different chains. A block on chain $c$ at height
$h$ has to reference each block of height $h-1$ on all chains that are adjacent
to $c$. In addition a block at height $h$ also depends on the block at height
$h-1$ on the same chain. We also say that a chain $c$ depends on a chan $d$ if
$c$ is adjacent to $d$.

Since Chainweb graphs are undirected, dependencies between chains are symmetric.
Thus, In the following we encode dependencies using directed, symmetric directed
graphs. We also make them reflexiv, by making each vertex adjacent to itself,
because each each block depends on its parent on the same chain.
"""

import igraph
import numpy as np

# ############################################################################ #
# Tools

def add_adjacents(graph, adjs):
    """
    Add edges from adjacency lists to a graph.
    """
    for i, adj in adjs:
        for j in adj:
            graph.add_edge(i, j)
    return graph

# ############################################################################ #
# Petersen

def petersen():
    """
    Petersen graph. A solution of the degree-diameter problem with 10 vertices.
    It is the minimal solution for degree 3 and diameter 2.

    This graph was used on mainnet before the transition to the twenty chain graph.
    """
    graph = igraph.Graph(directed=True)
    graph.add_vertices(10)
    graph.add_edges(
        [ (0, 0), (0, 2), (0, 3), (0, 5)
        , (1, 1), (1, 3), (1, 4), (1, 6)
        , (2, 2), (2, 0), (2, 4), (2, 7)
        , (3, 3), (3, 0), (3, 1), (3, 8)
        , (4, 4), (4, 1), (4, 2), (4, 9)
        , (5, 5), (5, 0), (5, 6), (5, 9)
        , (6, 6), (6, 1), (6, 5), (6, 7)
        , (7, 7), (7, 2), (7, 6), (7, 8)
        , (8, 8), (8, 3), (8, 7), (8, 9)
        , (9, 9), (9, 4), (9, 5), (9, 8)
        ]
    )
    return(graph)

Petersen_Layout = igraph.Layout([ 
    (np.cos(0 * np.pi / 5), np.sin(0 * np.pi / 5)),
    (np.cos(2 * np.pi / 5), np.sin(2 * np.pi / 5)),
    (np.cos(4 * np.pi / 5), np.sin(4 * np.pi / 5)),
    (np.cos(6 * np.pi / 5), np.sin(6 * np.pi / 5)),
    (np.cos(8 * np.pi / 5), np.sin(8 * np.pi / 5)),

    (2 * np.cos(0 * np.pi / 5), 2 * np.sin(0 * np.pi / 5)),
    (2 * np.cos(2 * np.pi / 5), 2 * np.sin(2 * np.pi / 5)),
    (2 * np.cos(4 * np.pi / 5), 2 * np.sin(4 * np.pi / 5)),
    (2 * np.cos(6 * np.pi / 5), 2 * np.sin(6 * np.pi / 5)),
    (2 * np.cos(8 * np.pi / 5), 2 * np.sin(8 * np.pi / 5)),
])

# ############################################################################ #
# Twenty

def twenty():
    """
    Twenty chain graph. A solution of the degree-diameter problem with 20.
    It is the minimal solution for degree 3 and diameter 3.

    This is the graph that is currently used on mainnet.
    """
    graph = igraph.Graph(directed=True)
    graph.add_vertices(20)
    graph.add_edges(
        [ (0, 0), (0, 10), (0,15), (0,5)
        , (1, 1), (1, 11), (1,16), (1,6)
        , (2, 2), (2, 12), (2,17), (2,7)
        , (3, 3), (3, 13), (3,18), (3,8)
        , (4, 4), (4, 14), (4,19), (4,9)
        , (5, 5), (5, 0), (5,7), (5,8)
        , (6, 6), (6, 1), (6,8), (6,9)
        , (7, 7), (7, 2), (7,5), (7,9)
        , (8, 8), (8, 3), (8,5), (8,6)
        , (9, 9), (9, 4), (9,6), (9,7)
        , (10, 10), (10, 0), (10,11), (10,19)
        , (11, 11), (11, 1), (11,10), (11,12)
        , (12, 12), (12, 11), (12,13), (12,2)
        , (13, 13), (13, 12), (13,14), (13,3)
        , (14, 14), (14, 13), (14,15), (14,4)
        , (15, 15), (15, 0), (15,14), (15,16)
        , (16, 16), (16, 1), (16,15), (16,17)
        , (17, 17), (17, 16), (17,18), (17,2)
        , (18, 18), (18, 17), (18,19), (18,3)
        , (19, 19), (19, 10), (19,18), (19,4)
        ]
    )
    return (graph)

# ############################################################################ #
# D4K4

def d4k4():
    """
    From Geoffrey Exoo's list. A solution of the degree-diameter problem with 98
    vertices. The graph is regular with degree 4 and has diameter 4.
    """
    graph = igraph.Graph(directed=True)
    graph.add_vertices(98)
    graph.add_edges([(i, i) for i in range(98)])
    add_adjacents(graph,
        [ (0, [31, 91, 65, 49])
        , (1, [30, 90, 64, 48])
        , (2, [33, 93, 67, 51])
        , (3, [32, 92, 66, 50])
        , (4, [35, 95, 69, 53])
        , (5, [34, 94, 68, 52])
        , (6, [37, 97, 57, 55])
        , (7, [36, 96, 56, 54])
        , (8, [39, 85, 59, 43])
        , (9, [38, 84, 58, 42])
        , (10, [41, 87, 61, 45])
        , (11, [40, 86, 60, 44])
        , (12, [29, 89, 63, 47])
        , (13, [28, 88, 62, 46])
        , (14, [63, 94, 35, 73])
        , (15, [62, 95, 34, 72])
        , (16, [65, 96, 37, 75])
        , (17, [64, 97, 36, 74])
        , (18, [67, 84, 39, 77])
        , (19, [66, 85, 38, 76])
        , (20, [69, 86, 41, 79])
        , (21, [68, 87, 40, 78])
        , (22, [57, 88, 29, 81])
        , (23, [56, 89, 28, 80])
        , (24, [59, 90, 31, 83])
        , (25, [58, 91, 30, 82])
        , (26, [61, 92, 33, 71])
        , (27, [60, 93, 32, 70])
        , (28, [13, 23, 78, 49])
        , (29, [12, 22, 79, 48])
        , (30, [1, 25, 80, 51])
        , (31, [0, 24, 81, 50])
        , (32, [3, 27, 82, 53])
        , (33, [2, 26, 83, 52])
        , (34, [5, 15, 70, 55])
        , (35, [4, 14, 71, 54])
        , (36, [7, 17, 72, 43])
        , (37, [6, 16, 73, 42])
        , (38, [9, 19, 74, 45])
        , (39, [8, 18, 75, 44])
        , (40, [11, 21, 76, 47])
        , (41, [10, 20, 77, 46])
        , (42, [61, 9, 89, 37])
        , (43, [60, 8, 88, 36])
        , (44, [63, 11, 91, 39])
        , (45, [62, 10, 90, 38])
        , (46, [65, 13, 93, 41])
        , (47, [64, 12, 92, 40])
        , (48, [67, 1, 95, 29])
        , (49, [66, 0, 94, 28])
        , (50, [69, 3, 97, 31])
        , (51, [68, 2, 96, 30])
        , (52, [57, 5, 85, 33])
        , (53, [56, 4, 84, 32])
        , (54, [59, 7, 87, 35])
        , (55, [58, 6, 86, 34])
        , (56, [23, 83, 7, 53])
        , (57, [22, 82, 6, 52])
        , (58, [25, 71, 9, 55])
        , (59, [24, 70, 8, 54])
        , (60, [27, 73, 11, 43])
        , (61, [26, 72, 10, 42])
        , (62, [15, 75, 13, 45])
        , (63, [14, 74, 12, 44])
        , (64, [17, 77, 1, 47])
        , (65, [16, 76, 0, 46])
        , (66, [19, 79, 3, 49])
        , (67, [18, 78, 2, 48])
        , (68, [21, 81, 5, 51])
        , (69, [20, 80, 4, 50])
        , (70, [34, 59, 89, 27])
        , (71, [35, 58, 88, 26])
        , (72, [36, 61, 91, 15])
        , (73, [37, 60, 90, 14])
        , (74, [38, 63, 93, 17])
        , (75, [39, 62, 92, 16])
        , (76, [40, 65, 95, 19])
        , (77, [41, 64, 94, 18])
        , (78, [28, 67, 97, 21])
        , (79, [29, 66, 96, 20])
        , (80, [30, 69, 85, 23])
        , (81, [31, 68, 84, 22])
        , (82, [32, 57, 87, 25])
        , (83, [33, 56, 86, 24])
        , (84, [18, 81, 9, 53])
        , (85, [19, 80, 8, 52])
        , (86, [20, 83, 11, 55])
        , (87, [21, 82, 10, 54])
        , (88, [22, 71, 13, 43])
        , (89, [23, 70, 12, 42])
        , (90, [24, 73, 1, 45])
        , (91, [25, 72, 0, 44])
        , (92, [26, 75, 3, 47])
        , (93, [27, 74, 2, 46])
        , (94, [14, 77, 5, 49])
        , (95, [15, 76, 4, 48])
        , (96, [16, 79, 7, 51])
        , (97, [17, 78, 6, 50])
        ]
    )
    return (graph)

# ############################################################################ #
# Hoffman-Singleton

def hoffman_singleton():
    """
    From Geoffrey Exoo's list. A solution of the degree-diameter problem with 50
    vertices. The graph is regular with degree 7 and has diameter 2.
    """
    graph = igraph.Graph(directed=True)
    graph.add_vertices(50)
    graph.add_edges([(i, i) for i in range(50)])
    add_adjacents(graph,
        [ (0,[2,3,25,30,35,40,45])
       , (1,[3,4,26,31,36,41,46])
       , (2,[0,4,27,32,37,42,47])
       , (3,[0,1,28,33,38,43,48])
       , (4,[1,2,29,34,39,44,49])
       , (5,[7,8,25,34,38,42,46])
       , (6,[8,9,26,30,39,43,47])
       , (7,[5,9,27,31,35,44,48])
       , (8,[5,6,28,32,36,40,49])
       , (9,[6,7,29,33,37,41,45])
       , (10,[12,13,25,33,36,44,47])
       , (11,[13,14,26,34,37,40,48])
       , (12,[10,14,27,30,38,41,49])
       , (13,[10,11,28,31,39,42,45])
       , (14,[11,12,29,32,35,43,46])
       , (15,[17,18,25,32,39,41,48])
       , (16,[18,19,26,33,35,42,49])
       , (17,[15,19,27,34,36,43,45])
       , (18,[15,16,28,30,37,44,46])
       , (19,[16,17,29,31,38,40,47])
       , (20,[22,23,25,31,37,43,49])
       , (21,[23,24,26,32,38,44,45])
       , (22,[20,24,27,33,39,40,46])
       , (23,[20,21,28,34,35,41,47])
       , (24,[21,22,29,30,36,42,48])
       , (25,[0,5,10,15,20,26,29])
       , (26,[1,6,11,16,21,25,27])
       , (27,[2,7,12,17,22,26,28])
       , (28,[3,8,13,18,23,27,29])
       , (29,[4,9,14,19,24,25,28])
       , (30,[0,6,12,18,24,31,34])
       , (31,[1,7,13,19,20,30,32])
       , (32,[2,8,14,15,21,31,33])
       , (33,[3,9,10,16,22,32,34])
       , (34,[4,5,11,17,23,30,33])
       , (35,[0,7,14,16,23,36,39])
       , (36,[1,8,10,17,24,35,37])
       , (37,[2,9,11,18,20,36,38])
       , (38,[3,5,12,19,21,37,39])
       , (39,[4,6,13,15,22,35,38])
       , (40,[0,8,11,19,22,41,44])
       , (41,[1,9,12,15,23,40,42])
       , (42,[2,5,13,16,24,41,43])
       , (43,[3,6,14,17,20,42,44])
       , (44,[4,7,10,18,21,40,43])
       , (45,[0,9,13,17,21,46,49])
       , (46,[1,5,14,18,22,45,47])
       , (47,[2,6,10,19,23,46,48])
       , (48,[3,7,11,15,24,47,49])
       , (49,[4,8,12,16,20,45,48])
       ]
    )
    return graph


# ############################################################################ #
# Constants

Petersen = petersen()
Twenty = twenty()
HoffmanSingleton = hoffman_singleton()
D4K4 = d4k4()
